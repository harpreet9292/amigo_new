// Mocks generated by Mockito 5.0.15 from annotations
// in amigotools/test/services/background/controllers/FlexEntitiesController_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:amigotools/entities/flexes/FlexEntity.dart' as _i5;
import 'package:amigotools/services/storage/DatabaseConnector.dart' as _i2;
import 'package:amigotools/services/storage/FlexEntitiesStorage.dart' as _i3;
import 'package:amigotools/services/webapi/FlexEntitiesApi.dart' as _i8;
import 'package:amigotools/utils/types/BriefDbItem.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDatabaseConnector_0 extends _i1.Fake
    implements _i2.DatabaseConnector {}

/// A class which mocks [FlexEntitiesStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlexEntitiesStorage extends _i1.Mock
    implements _i3.FlexEntitiesStorage {
  MockFlexEntitiesStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i2.DatabaseConnector get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabaseConnector_0()) as _i2.DatabaseConnector);
  @override
  bool get assignNegativeId =>
      (super.noSuchMethod(Invocation.getter(#assignNegativeId),
          returnValue: false) as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<Iterable<_i5.FlexEntity>> fetch(
          {int? id,
          String? ident,
          List<_i5.FlexEntityType>? types,
          bool? atMenu,
          bool? atLogin,
          bool? atLogout}) =>
      (super.noSuchMethod(
              Invocation.method(#fetch, [], {
                #id: id,
                #ident: ident,
                #types: types,
                #atMenu: atMenu,
                #atLogin: atLogin,
                #atLogout: atLogout
              }),
              returnValue:
                  Future<Iterable<_i5.FlexEntity>>.value(<_i5.FlexEntity>[]))
          as _i4.Future<Iterable<_i5.FlexEntity>>);
  @override
  _i4.Future<Iterable<_i6.BriefDbItem>> fetchBrief(
          {bool? getPlural,
          String? ident,
          List<_i5.FlexEntityType>? types,
          String? hasRoleCreate,
          bool? isFav,
          bool? atMenu,
          bool? atLogin,
          bool? atLogout}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchBrief, [], {
                #getPlural: getPlural,
                #ident: ident,
                #types: types,
                #hasRoleCreate: hasRoleCreate,
                #isFav: isFav,
                #atMenu: atMenu,
                #atLogin: atLogin,
                #atLogout: atLogout
              }),
              returnValue:
                  Future<Iterable<_i6.BriefDbItem>>.value(<_i6.BriefDbItem>[]))
          as _i4.Future<Iterable<_i6.BriefDbItem>>);
  @override
  _i6.BriefDbItem? getCachedBriefItem(String? ident) =>
      (super.noSuchMethod(Invocation.method(#getCachedBriefItem, [ident]))
          as _i6.BriefDbItem?);
  @override
  _i4.Future<_i6.BriefDbItem?> getCachedBriefItemEnsureFilled(String? ident) =>
      (super.noSuchMethod(
              Invocation.method(#getCachedBriefItemEnsureFilled, [ident]),
              returnValue: Future<_i6.BriefDbItem?>.value())
          as _i4.Future<_i6.BriefDbItem?>);
  @override
  _i4.Future<void> ensureFilledCache() =>
      (super.noSuchMethod(Invocation.method(#ensureFilledCache, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<Map<String, Object?>>> fetchRaw(
          {List<String>? columns,
          Map<String, Object?>? where,
          String? orderBy}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchRaw, [],
                  {#columns: columns, #where: where, #orderBy: orderBy}),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i4.Future<List<Map<String, Object?>>>);
  @override
  _i4.Future<int?> add(_i5.FlexEntity? item) =>
      (super.noSuchMethod(Invocation.method(#add, [item]),
          returnValue: Future<int?>.value()) as _i4.Future<int?>);
  @override
  _i4.Future<bool> update(_i5.FlexEntity? item) =>
      (super.noSuchMethod(Invocation.method(#update, [item]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> updatePartial({int? id, Map<String, dynamic>? values}) =>
      (super.noSuchMethod(
          Invocation.method(#updatePartial, [], {#id: id, #values: values}),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> acceptChanges(
          {List<int>? requestedIdsOrAll,
          Iterable<_i5.FlexEntity>? receivedItems}) =>
      (super.noSuchMethod(
          Invocation.method(#acceptChanges, [], {
            #requestedIdsOrAll: requestedIdsOrAll,
            #receivedItems: receivedItems
          }),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<int> delete({int? id, List<int>? ids}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#id: id, #ids: ids}),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> deleteAll() =>
      (super.noSuchMethod(Invocation.method(#deleteAll, []),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  void setSilentMode(bool? enable) =>
      super.noSuchMethod(Invocation.method(#setSilentMode, [enable]),
          returnValueForMissingStub: null);
  @override
  void notifyListenersIfAllowed() =>
      super.noSuchMethod(Invocation.method(#notifyListenersIfAllowed, []),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> decodeComplexValues(
          Map<String, dynamic>? map, List<String>? keys) =>
      (super.noSuchMethod(Invocation.method(#decodeComplexValues, [map, keys]),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FlexEntitiesApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlexEntitiesApi extends _i1.Mock implements _i8.FlexEntitiesApi {
  MockFlexEntitiesApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Iterable<_i5.FlexEntity>?> fetchEntities({List<int>? ids}) =>
      (super.noSuchMethod(Invocation.method(#fetchEntities, [], {#ids: ids}),
              returnValue: Future<Iterable<_i5.FlexEntity>?>.value())
          as _i4.Future<Iterable<_i5.FlexEntity>?>);
  @override
  String toString() => super.toString();
}
